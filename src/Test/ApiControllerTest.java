package Test;

import Main.ApiController;
import org.junit.Test;

import java.io.IOException;
import java.net.HttpURLConnection;

public class ApiControllerTest {
    @Test
    public void Test_connection_setup_localhost(){
        ApiController controller = new ApiController("http://localhost:8081/graphql");
        boolean result = Test_connection_setup(controller);
        assert(result);
    }
@Test
    public void Test_connection_setup_error(){
        ApiController controller = new ApiController("http://dgfdsdfsd");
        boolean result = Test_connection_setup(controller);
        assert(!result);
    }


    public boolean Test_connection_setup(ApiController controller){
        boolean works = true;
        HttpURLConnection connection = controller.startConnection();
        try{
            works = HttpURLConnection.HTTP_OK == connection.getResponseCode();
        }catch(IOException e){
            works = false;
        }
        return  works;
    }

    @Test
    public void Test_sent_query_Almere(){
        String expected_result =
                "{\"data\":{\"publicbody\":{\"naam\":\"Almere\"}}}";
        String query =
                "query MyQuery {\n" +
                        "  publicbody(code: \"GM0034\") {\n" +
                        "    naam\n" +
                        "  }\n" +
                        "}";
        assert Test_sent_query(query, expected_result, "http://localhost:8081/graphql");
    }

    @Test
    public void Test_sent_query_False_query(){
        String expected_result =
                "{\"errors\":[{\"message\":\"Validation error (FieldUndefined@[privatebody]) : Field \'privatebody\' in type \'Query\' is undefined\",\"locations\":[{\"line\":2,\"column\":3}],\"extensions\":{\"classification\":\"ValidationError\"}}]}";
        String query =
                "query MyQuery {\n" +
                        "  privatebody(code: \"GM0034\") {\n" +
                        "    naam\n" +
                        "  }\n" +
                        "}";
        assert Test_sent_query(query, expected_result, "http://localhost:8081/graphql");
    }

    @Test
    public void Test_sent_query_Gelderland(){
        String expected_result =
                "{\"data\":{\"publicbody\":{\"naam\":\"Gelderland\"}}}";
        String query =
                "query MyQuery {\n" +
                        "  publicbody(code: \"PV25\") {\n" +
                        "    naam\n" +
                        "  }\n" +
                        "}";
        assert Test_sent_query(query, expected_result, "http://localhost:8081/graphql");
    }

    @Test
    public void Test_sent_query_Almere_coordinaten(){
        String expected_result =
                "{\"data\":{\"administrativearea\":{\"municipality\":{\"OfficieleNaam\":\"Gemeente Almere\"},\"geometrie\":\"POLYGON ((5.317034781 52.303484378, 5.317194486 52.30357833, 5.317777414 52.303921238, 5.317909994 52.303999221, 5.318167288 52.304150571, 5.320222002 52.305359109, 5.32307981 52.307261122, 5.327550494 52.310279086, 5.332693141 52.313729668, 5.332726154 52.31375182, 5.332952671 52.313903456, 5.332953814 52.31390422, 5.332988585 52.313927496, 5.332989391 52.313928036, 5.333058714 52.313974435, 5.333288295 52.314128965, 5.333393268 52.314199395, 5.333504705 52.31427416, 5.335480185 52.313503824, 5.336351651 52.313184513, 5.337181733 52.312854303, 5.337217314 52.312837242, 5.337269195 52.312812359, 5.341509807 52.311159015, 5.342404223 52.310823392, 5.343271909 52.310486152, 5.344176541 52.310172449, 5.344923421 52.309939499, 5.346094539 52.309703799, 5.346955156 52.309523085, 5.347051508 52.309508378, 5.347409616 52.309461584, 5.347547599 52.309460732, 5.34814784 52.30938292, 5.34852518 52.309173183, 5.348617126 52.309165753, 5.348962621 52.309302658, 5.349703589 52.309250057, 5.350497037 52.309232233, 5.351501045 52.309235957, 5.352011448 52.309251299, 5.352780079 52.309296833, 5.353373303 52.309348315, 5.35400629 52.309407814, 5.354551976 52.309503595, 5.35455287 52.309503783, 5.355203098 52.309612712, 5.361509176 52.310785256, 5.379211203 52.313995391, 5.378993491 52.314446547, 5.378949921 52.31444879, 5.378902418 52.314460929, 5.378852244 52.314488239, 5.378797184 52.314527376, 5.378549954 52.314703022, 5.376498976 52.316502076, 5.376389018 52.316598512, 5.376375553 52.316608676, 5.376197609 52.316742935, 5.376075401 52.31684922, 5.367446861 52.324351812, 5.367356968 52.324429962, 5.363130477 52.328103659, 5.358903579 52.331777129, 5.354668261 52.335456968, 5.354255769 52.335815333, 5.350816116 52.338803245, 5.350798936 52.338818159, 5.350463237 52.339109738, 5.350445616 52.339125047, 5.341989901 52.346467941, 5.340612814 52.347663535, 5.339662813 52.348488278, 5.338495782 52.349501386, 5.338044451 52.349893174, 5.337767407 52.350133647, 5.337718633 52.350175994, 5.337660206 52.350226597, 5.337378091 52.350470922, 5.337306015 52.350533509, 5.337182974 52.350640346, 5.335488068 52.352112123, 5.334867012 52.352651383, 5.333362471 52.353957716, 5.329117401 52.357642982, 5.329069536 52.357684535, 5.324723846 52.361456375, 5.320409539 52.365200191, 5.316684305 52.368432197, 5.311743716 52.372770375, 5.308193514 52.37588706, 5.307973783 52.376080227, 5.307961208 52.376091255, 5.307948558 52.376102355, 5.306709832 52.377189259, 5.306673721 52.377220969, 5.306452565 52.377415112, 5.306209284 52.377628679, 5.306127028 52.377700865, 5.305884421 52.377913776, 5.305757388 52.378025251, 5.304436718 52.379184388, 5.301275356 52.381958773, 5.301262144 52.381970367, 5.301243577 52.381986666, 5.301556444 52.382125023, 5.302320605 52.382443925, 5.303084344 52.382751038, 5.303826429 52.383027214, 5.304777276 52.383361492, 5.305564784 52.383636979, 5.306345227 52.383909292, 5.307752204 52.384400341, 5.308971444 52.384829512, 5.310495454 52.385365535, 5.311983258 52.385878974, 5.312019352 52.385893646, 5.312838947 52.386183557, 5.312900413 52.386204959, 5.312998109 52.386238976, 5.31301047 52.38624328, 5.313038583 52.386253067, 5.313067287 52.386225322, 5.313397528 52.385842649, 5.313516101 52.385741703, 5.313932435 52.385892585, 5.313934622 52.385893378, 5.31397047 52.385906369, 5.3145424 52.386113554, 5.314567503 52.386122647, 5.314573096 52.386124663, 5.314580436 52.386127337, 5.314631067 52.386145676, 5.314809253 52.386210226, 5.314909753 52.386246634, 5.315570037 52.38648581, 5.319436905 52.387886422, 5.319533008 52.387921232, 5.31958382 52.387939632, 5.319708302 52.387984722, 5.320022335 52.38809846, 5.320543597 52.388287244, 5.332603194 52.392653759, 5.332933166 52.392773168, 5.332893533 52.392806457, 5.332701514 52.392967723, 5.332675161 52.392989865, 5.332416682 52.393206948, 5.332369018 52.393246741, 5.333750694 52.393763919, 5.333786231 52.393777219, 5.33458771 52.394077217, 5.334803666 52.394157707, 5.33612274 52.394649323, 5.337511261 52.395166613, 5.338609586 52.395581488, 5.339352466 52.395813222, 5.340106909 52.39594124, 5.341016749 52.395977092, 5.341078892 52.39598125, 5.342292446 52.395976326, 5.343434701 52.395894609, 5.34389856 52.395861535, 5.344371621 52.395884348, 5.344828709 52.39601628, 5.345912426 52.39645435, 5.345964252 52.396415857, 5.34637055 52.39611407, 5.347256179 52.396515129, 5.347367588 52.396565578, 5.34771652 52.396723607, 5.3479233 52.396837639, 5.348167611 52.397028805, 5.348320294 52.39733011, 5.348918686 52.39838311, 5.34942184 52.399157821, 5.349527067 52.399301746, 5.349647268 52.399444238, 5.349781298 52.399583947, 5.350014025 52.399774477, 5.350496001 52.400103474, 5.35077165 52.400209191, 5.349513403 52.401468468, 5.348929725 52.401240813, 5.348489872 52.401150794, 5.34809085 52.401082716, 5.347693123 52.401046543, 5.347386912 52.401038891, 5.347024267 52.401042812, 5.34572348 52.401148505, 5.344900364 52.401271612, 5.344316901 52.401334324, 5.344193116 52.401308026, 5.34370946 52.401242689, 5.343372321 52.40115862, 5.343356428 52.401152934, 5.343320887 52.401179731, 5.343115739 52.401334402, 5.342643279 52.401678521, 5.3421583 52.402016072, 5.341661064 52.402346894, 5.341151868 52.402670816, 5.340954971 52.40279057, 5.340952398 52.402792133, 5.340630886 52.402987675, 5.3405987 52.403006402, 5.340098473 52.40329732, 5.33992346 52.403394621, 5.339920799 52.403396094, 5.339920519 52.403396256, 5.339749873 52.403491132, 5.339554789 52.403599597, 5.339000203 52.403894335, 5.338434935 52.404181399, 5.337859309 52.404460655, 5.337273575 52.404731942, 5.336678055 52.404995141, 5.33607303 52.4052501, 5.335458824 52.405496712, 5.33483573 52.405734851, 5.334204058 52.405964381, 5.333798104 52.406105896, 5.333154225 52.406322383, 5.33250516 52.406533005, 5.33185264 52.406739604, 5.331198265 52.406943996, 5.329793056 52.407380647, 5.327351811 52.4081336, 5.327014188 52.408237729, 5.326512633 52.408392418, 5.323225194 52.409395736, 5.32086775 52.410107672, 5.320504958 52.410217233, 5.319930829 52.41039061, 5.319330056 52.410570323, 5.319053996 52.410652742, 5.318492491 52.410820367, 5.318215516 52.410903053, 5.318215163 52.410903161, 5.317630536 52.411077922, 5.316629574 52.411376992, 5.313321499 52.412354892, 5.310006679 52.413324273, 5.306685145 52.414285127, 5.2992831 52.416414423, 5.29920377 52.416437237, 5.298874092 52.416532053, 5.282279253 52.421303186, 5.281652601 52.421483287, 5.281383618 52.42156059, 5.281018382 52.421665624, 5.279329374 52.422150948, 5.279031945 52.422237469, 5.278373128 52.422436719, 5.277721341 52.422644439, 5.277076878 52.422860511, 5.276440003 52.423084856, 5.27581101 52.423317365, 5.275198463 52.423554722, 5.274577788 52.423806474, 5.273974117 52.424062851, 5.273379418 52.424326962, 5.272793982 52.424598682, 5.272218018 52.424877895, 5.271651847 52.425164485, 5.27116122 52.425423708, 5.270549801 52.425759248, 5.270014397 52.42606716, 5.269489758 52.426381912, 5.268976121 52.426703359, 5.268473661 52.427031367, 5.267982645 52.427365783, 5.267503278 52.427706464, 5.266982549 52.428094421, 5.266580348 52.428405994, 5.266137196 52.428764529, 5.26570652 52.429128702, 5.263482788 52.431051411, 5.263334643 52.431179489, 5.259108954 52.434832635, 5.259090556 52.434848541, 5.259090291 52.434848774, 5.258714682 52.435173507, 5.25847132 52.435383891, 5.258344081 52.435493921, 5.254298238 52.438991984, 5.24558084 52.446040225, 5.188595676 52.492042938, 5.15520121 52.5189443, 5.105032976 52.559278572, 5.07462212 52.583681865, 5.060426665 52.578936356, 5.071660769 52.559194724, 5.080071204 52.544402709, 5.09460816 52.518810453, 5.100720374 52.508040497, 5.107091109 52.502767184, 5.112986472 52.497885915, 5.114784832 52.496396628, 5.120203334 52.491908596, 5.151022287 52.466359867, 5.15438085 52.461423434, 5.165871144 52.444525933, 5.180909826 52.422389015, 5.182136745 52.420581924, 5.185488686 52.415644568, 5.137329783 52.415552757, 5.07916111 52.388654214, 5.079287891 52.370407866, 5.09511868 52.358577229, 5.116204018 52.342635795, 5.134608006 52.328709075, 5.137865141 52.326254705, 5.138343034 52.325887126, 5.13844046 52.325812185, 5.138824367 52.325516946, 5.140616625 52.32413828, 5.142303962 52.32284025, 5.143978829 52.32155168, 5.146143985 52.319669685, 5.148878666 52.318729359, 5.151131726 52.318646874, 5.1666139 52.32023691, 5.19065671 52.322701802, 5.205187622 52.324189046, 5.212925706 52.325077437, 5.220405156 52.326053934, 5.223535556 52.325874058, 5.224589624 52.325761728, 5.229320614 52.325256378, 5.237280527 52.323954581, 5.238074788 52.323824653, 5.259503485 52.320316989, 5.262084649 52.319894085, 5.279039585 52.317115114, 5.281140548 52.316770654, 5.287397011 52.315056592, 5.297227033 52.311186498, 5.301080141 52.309669121, 5.304021074 52.308299394, 5.305390689 52.307661456, 5.30545507 52.307631589, 5.307259667 52.306790863, 5.313398721 52.303381481, 5.313904064 52.303100789, 5.315178971 52.302392637, 5.317034781 52.303484378))\"}}}";
        String query =
                "query MyQuery {\n" +
                        "  administrativearea(identificatie: \"GM0034\") {\n" +
                        "    municipality {\n" +
                        "      OfficieleNaam\n" +
                        "    }\n" +
                        "    geometrie\n" +
                        "  }\n" +
                        "}";
        assert Test_sent_query(query, expected_result, "http://localhost:8081/graphql");
    }


    public boolean Test_sent_query(String query, String expected_result, String url){
        ApiController controller = new ApiController(url);
        String Result;
        Result = controller.runJsonQuery(query);
        return Result.equals(expected_result);
    }
}


